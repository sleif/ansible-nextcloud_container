---

- name: Gather info about specific network
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  become: "{{ podman_rootless | bool }}"
  containers.podman.podman_network_info:
    name: "{{ podman_network_name }}"
  register: _podman_network_info

- name: set_fact _podman_network_subnet
  ansible.builtin.set_fact:
    _podman_network_subnet: "{{ _podman_network_info.networks[0].subnets[0].subnet }}"

# the next task will return:
# - _container_storage_dir_base_local
# - _container_storage_dir_base
# - _group, _owner
# - _systemd_scope
# - _systemd_service_files_dir
# - _xdg_runtime_dir
- name: Include podman_init_vars.yml from sleif.podman
  ansible.builtin.include_tasks: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files: sleif.podman/tasks/includes/podman_init_vars.yml
      paths: "{{ lookup('config', 'DEFAULT_ROLES_PATH') }}"
  tags: always

- name: Create persistant nextcloud data directories
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  become: "{{ podman_rootless | bool }}"
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0750'
  loop:
    - "{{ _container_storage_dir_base }}/{{ container_name }}/nextcloud"
    - "{{ _container_storage_dir_base }}/{{ container_name }}/nextcloud_config"
    - "{{ _container_storage_dir_base }}/{{ container_name }}/nextcloud_custom_apps"
    - "{{ _container_storage_dir_base }}/{{ container_name }}/nextcloud_data"
    - "{{ _container_storage_dir_base }}/{{ container_name }}/nextcloud_themes"

- name: Update Nextcloud apps before a possible update of the container
  ansible.builtin.include_tasks:
    file: nextcloud_update_apps.yml
    apply:
      tags:
        - nextcloud_update_apps
  tags: always

- name: Include role sleif.podman podman_operation podman_pod_create
  ansible.builtin.include_role:
    name: sleif.podman
    apply:
      tags:
        - podman_pod_create
  vars:
    podman_operation: podman_pod_create
  tags: always

- name: Create Podman secrets
  become: "{{ podman_rootless | bool }}"
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  containers.podman.podman_secret:
    state: present
    name: "{{ item.name }}"
    data: "{{ item.data }}"
    skip_existing: true
  loop:
    - {name: 'nextcloud_admin_password', data: '{{ nextcloud_admin_password }}'}
    - {name: 'mariadb_password', data: '{{ mariadb_password }}'}
  tags: podman_secrets

- name: Pull container image {{ nextcloud_container_image }}
  become: "{{ podman_rootless | bool }}"
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  containers.podman.podman_image:
    name: "{{ nextcloud_container_image }}"
    tag: "{{ nextcloud_container_image_tag }}"
    # force: true

# https://store.docker.com/images/nextcloud
- name: Create Nextcloud container
  become: "{{ podman_rootless | bool }}"
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  containers.podman.podman_container:
    name: "{{ container_name }}"
    image: "{{ nextcloud_container_image }}:{{ nextcloud_container_image_tag }}"
    state: created
    restart_policy: always
    recreate: "{{ podman_container_recreate | d(false) }}"
    pod: "{{ pod_name | default(omit) }}"
    network: "{{ podman_network_name if pod_name | d('') is falsy else [] }}"
    # published: "{{ nextcloud_container_exposed_port + ':80' if pod_name is truthy else omit }}"
    volume:
      - "{{ _container_storage_dir_base }}/{{ container_name }}/nextcloud:/var/www/html"
      - "{{ _container_storage_dir_base }}/{{ container_name }}/nextcloud_config:/var/www/html/config"
      - "{{ _container_storage_dir_base }}/{{ container_name }}/nextcloud_custom_apps:/var/www/html/custom_apps"
      - "{{ _container_storage_dir_base }}/{{ container_name }}/nextcloud_data:/var/www/html/data"
      - "{{ _container_storage_dir_base }}/{{ container_name }}/nextcloud_themes:/var/www/html/themes"
    secrets:
      - nextcloud_admin_password
      - mariadb_password
    env: "{{ nextcloud_container_env.main | combine(nextcloud_container_env_options | default({})) }}"
    timezone: "Europe/Berlin"
    tmpfs:
      "/tmp": "rw,mode=1777"
      # "/tmp": "rw,size=787448k,mode=1777"
  register: _container_create_results

- name: Include role sleif.podman podman_operation podman_generate_systemd
  ansible.builtin.include_role:
    name: sleif.podman
    apply:
      tags:
        - podman_generate_systemd
  vars:
    podman_operation: podman_generate_systemd
    target: "{{ pod_name if pod_name | d('') is truthy else container_name }}"
  tags: always

- name: become block
  become: "{{ podman_rootless | bool }}"
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  block:
    - name: Get Nextcloud container info
      containers.podman.podman_container_info:
        name: "{{ container_name }}"
      register: _container_info_results

    # - name: Register container IP
    #   ansible.builtin.set_fact:
    #     # _container_ip: "{{ vars['_container_create_results']['container']['NetworkSettings']['Networks'][podman_network_name]['IPAddress'] }}"
    #     _container_ip: "{{ vars['_container_info_results']['containers'][0]['NetworkSettings']['Networks'][podman_network_name]['IPAddress'] }}"
    # # - debug: var=_container_ip
    # - name: wait for nextcloud service comes up
    #   ansible.builtin.uri:
    #     url: "http://{{ _container_ip }}/"
    #     status_code: [200, 400]
    #     validate_certs: false
    #   register: result
    #   until: result is succeeded
    #   retries: 120
    #   delay: 10

    - name: wait for nextcloud service comes up (apache version)
      ansible.builtin.command: podman exec -t {{ container_name }} busybox wget -O - http://localhost/login
      register: _result
      until: _result.rc == 0
      changed_when: _result.rc != 0
      retries: 120
      delay: 10
      when: "'fpm' not in nextcloud_container_image_tag"

    - name: wait for nextcloud service comes up (fpm version)
      ansible.builtin.command: podman exec -t {{ container_name }} busybox nc -w 1 localhost 9000
      register: _result
      until: _result.rc == 0
      changed_when: _result.rc != 0
      retries: 120
      delay: 10
      when: "'fpm' in nextcloud_container_image_tag"

    - name: get enabled and disabled apps
      ansible.builtin.shell:
        set -o pipefail && podman exec --user www-data {{ container_name }} php occ app:list --shipped=false --output=json | grep "{"
      register: _nextcloud_app_list_result
      changed_when: false

    - name: set_fact _nextcloud_app_list
      ansible.builtin.set_fact:
        _nextcloud_app_list: "{{ _nextcloud_app_list_result.stdout | from_json }}"

    - name: install default and custom apps
      ansible.builtin.command:
        podman exec --user www-data {{ container_name }} php occ app:install {{ item }}
      loop: "{{ [nextcloud_apps_enabled_default + nextcloud_apps_enabled_custom] | flatten | unique }}"
      when:
        - item not in _nextcloud_app_list.enabled
        - item not in _nextcloud_app_list.disabled
      register: _result
      changed_when: _result.rc != 0
      failed_when: false
      ignore_errors: true

    - name: enable default and custom apps
      ansible.builtin.command:
        podman exec --user www-data {{ container_name }} php occ app:enable {{ item }}
      loop: "{{ [nextcloud_apps_enabled_default + nextcloud_apps_enabled_custom] | flatten | unique }}"
      when: item not in _nextcloud_app_list.enabled
      register: _result
      changed_when: _result.rc != 0

    - name: remove apps not wanted
      ansible.builtin.command:
        podman exec --user www-data {{ container_name }} php occ app:disable {{ item }}
      loop: "{{ nextcloud_apps_disabled }}"
      when: item in _nextcloud_app_list.enabled
      register: _result
      changed_when: _result.rc != 0

    # https://www.jeffgeerling.com/blog/2017/changing-deeply-nested-dict-variable-ansible-playbook
    - name: merge nextcloud_config | system
      ansible.builtin.set_fact:
        nextcloud_config: "{{ nextcloud_config | default({}) | combine({'system': nextcloud_config_system.system}, recursive=true) }}"

    - name: merge nextcloud_config | system memory caching
      ansible.builtin.set_fact:
        nextcloud_config: "{{ nextcloud_config | default({}) | combine({'system': nextcloud_config_system_memory_caching.system}, recursive=true) }}"

    - name: merge nextcloud_config | system mail
      ansible.builtin.set_fact:
        nextcloud_config: "{{ nextcloud_config | default({}) | combine({'system': nextcloud_config_system_smtp.system}, recursive=true) }}"
      when: nextcloud_config_system_smtp.system.mail_smtphost

    - name: merge nextcloud_config | apps preview
      ansible.builtin.set_fact:
        nextcloud_config: "{{ nextcloud_config | default({}) | combine({'apps': {'preview': nextcloud_config_apps_preview.apps.preview}}, recursive=true) }}"

    - name: merge nextcloud_config | apps previewgenerator
      ansible.builtin.set_fact:
        nextcloud_config: "{{ nextcloud_config | default({}) |
                            combine({'apps': {'previewgenerator': nextcloud_config_apps_previewgenerator.apps.previewgenerator}}, recursive=true) }}"
      tags: config_import

    - name: merge nextcloud_config | apps user_ldap
      ansible.builtin.set_fact:
        nextcloud_config: "{{ nextcloud_config | default({}) |
                          combine({'apps': {'user_ldap': nextcloud_config_apps_user_ldap.apps.user_ldap}}, recursive=true) }}"
      when: nextcloud_config_apps_user_ldap.apps.user_ldap.s01ldap_base

    - name: write temporary config file /dev/shm/nextcloud_config_file_for_import
      ansible.builtin.copy:
        content: "{{ nextcloud_config | to_nice_json(indent=2) }}"
        dest: "/dev/shm/nextcloud_config_file_for_import"
        # dest: "{{ _container_storage_dir_base }}/{{ container_name }}/nextcloud_config/nextcloud_config_file_for_import"
        mode: "0444"
        # setype: "container_file_t"
      changed_when: false
      tags: config_import

    - name: apply temporary config file /dev/shm/nextcloud_config_file_for_import
      ansible.builtin.shell: >
        set -o pipefail && podman cp /dev/shm/nextcloud_config_file_for_import {{ container_name }}:/dev/shm/nextcloud_config_file_for_import &&
        podman exec --user www-data {{ container_name }} php occ config:import /dev/shm/nextcloud_config_file_for_import &&
        podman exec {{ container_name }} rm -f /dev/shm/nextcloud_config_file_for_import
      register: _result
      changed_when: _result is success
      tags: config_import

    - name: remove temporary config file /dev/shm/nextcloud_config_file_for_import
      ansible.builtin.file:
        path: /dev/shm/nextcloud_config_file_for_import
        state: absent
      changed_when: false

    - name: Add Nextcloud cronjob
      ansible.builtin.cron:
        name: Nextcloud cronjob
        minute: "*/5"
        job: "podman exec --user www-data {{ container_name }} php /var/www/html/cron.php"
      tags:
        - cronjob

    - name: run occ db:add-missing-indices
      ansible.builtin.command:
        podman exec --user www-data {{ container_name }} php occ db:add-missing-indices --no-interaction
      register: _result
      changed_when: _result is success
