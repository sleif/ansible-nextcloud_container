---

- name: Gather info about specific network  # noqa: ignore-errors
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  become: "{{ podman_rootless | bool }}"
  containers.podman.podman_network_info:
    name: "{{ podman_network_name }}"
  register: _podman_network_info
  ignore_errors: true

- name: Set_fact _podman_network_subnet
  ansible.builtin.set_fact:
    _podman_network_subnet: "{{ _podman_network_info.networks[0].subnets[0].subnet }}"
  when:
    - not _podman_network_info.failed | bool

# the next task will return:
# - _container_storage_dir_base_local
# - _container_storage_dir_base
# - _group, _owner
# - _systemd_scope
# - _systemd_service_files_dir
# - _xdg_runtime_dir
- name: Include podman_init_vars.yml from sleif.podman
  ansible.builtin.include_tasks: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files: sleif.podman/tasks/includes/podman_init_vars.yml
      paths: "{{ lookup('config', 'DEFAULT_ROLES_PATH') }}"
  tags: always

- name: set fact _nextcloud_volumes
  ansible.builtin.set_fact:
    _nextcloud_volumes:
      - host: '{{ _container_storage_dir_base ~ "/" ~ nextcloud_container_name ~ "/nextcloud_php/zzz-nextcloud-php-config.ini" }}'
        target: '/usr/local/etc/php/conf.d/zzz-nextcloud-php-config.ini{{ container_volumes_parameter | d("") }}'
        mode: '0640'
        state: present
      - host: '{{ _container_storage_dir_base }}/{{ nextcloud_container_name ~ "/nextcloud_php/zzz-nextcloud-php-fpm-config.conf"
          if "fpm" in nextcloud_container_image_tag else nextcloud_container_name ~ "/nextcloud_php/zzz-nextcloud-php-fpm-config.conf" }}'
        target: '{{ "/usr/local/etc/php-fpm.d/zzz-nextcloud-php-fpm-config.conf" ~ container_volumes_parameter | d("")
          if "fpm" in nextcloud_container_image_tag else "/tmp/zzz-nextcloud-php-fpm-config.conf.inactive" ~ container_volumes_parameter | d("") }}'
        mode: '0640'
        state: present

- name: block for preparing volumes
  when:
    - pod_name is not defined or pod_name | length == 0
  block:
    - name: include_tasks from nextcloud_set_fact_pod_volumes
      ansible.builtin.include_tasks:
        file: nextcloud_set_fact_pod_volumes.yml
        apply:
          tags:
            - nextcloud_set_fact_pod_volumes
      tags: always

    - name: Create persistant nextcloud data directories
      become_user: "{{ podman_user if podman_rootless | bool else omit }}"
      become_method: containers.podman.podman_unshare
      become: "{{ podman_rootless | bool }}"
      ansible.builtin.file:
        path: "{{ item.host }}"
        state: directory
        mode: "{{ item.mode }}"
      loop: "{{ _pod_volumes }}"

    - name: set_fact add _pod_volumes to _nextcloud_volumes
      ansible.builtin.set_fact:
        _nextcloud_volumes: "{{ _nextcloud_volumes + _pod_volumes }}"

- name: Create nextcloud_php directory
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  become_method: containers.podman.podman_unshare
  become: "{{ podman_rootless | bool }}"
  ansible.builtin.file:
    path: "{{ _container_storage_dir_base }}/{{ nextcloud_container_name }}/nextcloud_php"
    mode: "0750"
    state: directory

- name: Create php config from nextcloud_php_config
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  become_method: containers.podman.podman_unshare
  become: "{{ podman_rootless | bool }}"
  ansible.builtin.copy:
    dest: "{{ _container_storage_dir_base }}/{{ nextcloud_container_name }}/nextcloud_php/zzz-nextcloud-php-config.ini"
    content: "{{ nextcloud_php_config | d('') }}"
    mode: "0644"

- name: Create php-fpm config from nextcloud_php_fpm_config
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  become_method: containers.podman.podman_unshare
  become: "{{ podman_rootless | bool }}"
  # when:
  #   - nextcloud_container_image_tag is search "fpm"
  ansible.builtin.copy:
    dest: "{{ _container_storage_dir_base }}/{{ nextcloud_container_name }}/nextcloud_php/zzz-nextcloud-php-fpm-config.conf"
    content: "{{ nextcloud_php_fpm_config | d('') }}"
    mode: "0644"

- name: Update Nextcloud apps before a possible update of the container
  ansible.builtin.include_tasks:
    file: nextcloud_update_apps.yml
    apply:
      tags:
        - nextcloud_update_apps
  tags: always

- name: block if nextcloud_custom_build_required
  when:
    - nextcloud_custom_build_required
  block:
    - name: set_fact _build_images
      ansible.builtin.set_fact:
        _build_images:
          - name: "{{ nextcloud_container_image }}"
            tag: "{{ nextcloud_container_image_tag }}"

    - name: Wait for nextcloud service comes up (fpm version)
      ansible.builtin.set_fact:
        containerfile_content: |-
          # Start from the official Nextcloud image
          FROM {{ nextcloud_container_image }}:{{ nextcloud_container_image_tag }}

          # Change Apache to listen on a different port (e.g., 11000)
          RUN sed -i 's/Listen 80/Listen {{ nextcloud_container_apache_port }}/' /etc/apache2/ports.conf && \
              sed -i 's/<VirtualHost \*:80>/<VirtualHost \*:{{ nextcloud_container_apache_port }}>/' /etc/apache2/sites-available/000-default.conf && \
              sed -i 's/<VirtualHost \*:80>/<VirtualHost \*:{{ nextcloud_container_apache_port }}>/' /etc/apache2/sites-available/default-ssl.conf

          # Enable mod_remoteip
          RUN a2enmod remoteip
          # Add config for remoteip (trust Caddy)
          RUN echo 'RemoteIPHeader X-Forwarded-For\nRemoteIPInternalProxy 127.0.0.1{%- if nextcloud_trusted_proxies[0] | d([]) is truthy %}
          \n# dont place all trusted proxies because Nextcloud requires X-Forwarded-For to detect proxy usage{%- for proxy in nextcloud_trusted_proxies %}
          \n# RemoteIPInternalProxy "{{ proxy }}"
          {%- endfor %}{% endif %}' > /etc/apache2/conf-available/remoteip.conf && a2enconf remoteip

          # # Adjust Apache log format to also log real client IPs
          # RUN sed -i 's/%h %l/%a %{X-Forwarded-For}i %l/' /etc/apache2/apache2.conf

          # # Add /debug path and script for inspecting headers
          # RUN mkdir -p /var/www/debug && \
          #   echo "<?php header('Content-Type: text/plain'); print_r(apache_request_headers());" > /var/www/debug/headers.php && \
          #   chmod +x /var/www/debug/headers.php && \
          #   echo 'Alias /debug /var/www/debug\n<Directory /var/www/debug>\n  Require all granted\n</Directory>' > /etc/apache2/conf-available/debug.conf && \
          #   a2enconf debug

          ENTRYPOINT ["/entrypoint.sh"]
          CMD ["apache2-foreground"]
      when: "not 'fpm' in nextcloud_container_image_tag"

- name: include_role sleif.podman podman_operation podman_create_container for mariadb
  ansible.builtin.include_role:
    name: sleif.podman
    apply:
      tags:
        - podman_container_create
  vars:
    # podman_rootless: true
    # podman_network_name: "{{ podman_networks.podman_network_rootless.podman_network_name if podman_rootless | bool else
    #   podman_networks.podman_network_root.podman_network_name }}"
    podman_operation: podman_container_create
    container_name: '{{ nextcloud_container_name }}'
    target: "{{ pod_name if pod_name | d('') is truthy else container_name }}"
    _container:
      name: '{{ container_name }}'
      image:
        name: "{{ nextcloud_container_image }}"
        tag: "{{ nextcloud_container_image_tag }}"
      build_required: "{{ nextcloud_custom_build_required }}"
      additional_images: "{{ _build_images | default([]) }}"
      containerfile_content: "{{ containerfile_content | d(omit) }}"
      network: "{{ podman_network_name if pod_name | d('') is falsy else [] }}"
      pod: "{{ pod_name | default(omit) }}"
      stop_timeout: 90
      volumes: "{{ _nextcloud_volumes }}"
      secrets:
        - {name: 'nextcloud_admin_password', data: '{{ nextcloud_admin_password }}'}
        - {name: 'mariadb_password', data: '{{ mariadb_password }}'}
      env: "{{ nextcloud_container_env.main | combine(nextcloud_container_env_options | default({})) }}"
      timezone: "Europe/Berlin"
      tmpfs:
        "/tmp": "rw,mode=1777"
  tags: podman_container_create

- name: Become block
  become: "{{ podman_rootless | bool }}"
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  block:
    - name: Get Nextcloud container info
      containers.podman.podman_container_info:
        name: "{{ nextcloud_container_name }}"
      register: _container_info_results

    # - name: Register container IP
    #   ansible.builtin.set_fact:
    #     # _container_ip: "{{ vars['_container_create_results']['container']['NetworkSettings']['Networks'][podman_network_name]['IPAddress'] }}"
    #     _container_ip: "{{ vars['_container_info_results']['containers'][0]['NetworkSettings']['Networks'][podman_network_name]['IPAddress'] }}"
    # # - debug: var=_container_ip
    # - name: Wait for nextcloud service comes up
    #   ansible.builtin.uri:
    #     url: "http://{{ _container_ip }}/"
    #     status_code: [200, 400]
    #     validate_certs: false
    #   register: result
    #   until: result is succeeded
    #   retries: 120
    #   delay: 10

    - name: Wait for nextcloud service comes up (apache version)
      ansible.builtin.command: podman exec -t {{ nextcloud_container_name }} busybox wget -O - http://localhost:{{ nextcloud_container_apache_port }}/login
      register: _result
      until: _result.rc == 0
      changed_when: _result.rc != 0
      retries: 120
      delay: 10
      when: "'fpm' not in nextcloud_container_image_tag"

    - name: Wait for nextcloud service comes up (fpm version)
      ansible.builtin.command: podman exec -t {{ nextcloud_container_name }} busybox nc -w 1 localhost 9000
      register: _result
      until: _result.rc == 0
      changed_when: _result.rc != 0
      retries: 120
      delay: 10
      when: "'fpm' in nextcloud_container_image_tag"

    - name: Wait a few seconds more
      ansible.builtin.wait_for:
        timeout: 60
      when:
        - _container_create_changed | bool

    - name: Get enabled and disabled apps
      ansible.builtin.shell:
        set -o pipefail && podman exec --user www-data {{ nextcloud_container_name }} php occ app:list --shipped=false --output=json | grep "{"
      register: _nextcloud_app_list_result
      changed_when: false

    - name: Set_fact _nextcloud_app_list
      ansible.builtin.set_fact:
        _nextcloud_app_list: "{{ _nextcloud_app_list_result.stdout | from_json }}"

    - name: Install default and custom apps
      ansible.builtin.command:
        podman exec --user www-data {{ nextcloud_container_name }} php occ app:install {{ item }}
      loop: "{{ [nextcloud_apps_enabled_default + nextcloud_apps_enabled_custom] | flatten | unique }}"
      when:
        - item not in _nextcloud_app_list.enabled
        - item not in _nextcloud_app_list.disabled
      register: _result
      changed_when: _result.rc != 0
      failed_when: false
      ignore_errors: true

    - name: Enable default and custom apps
      ansible.builtin.command:
        podman exec --user www-data {{ nextcloud_container_name }} php occ app:enable {{ item }}
      loop: "{{ [nextcloud_apps_enabled_default + nextcloud_apps_enabled_custom] | flatten | unique }}"
      when: item not in _nextcloud_app_list.enabled
      register: _result
      changed_when: _result.rc != 0

    - name: Remove apps not wanted
      ansible.builtin.command:
        podman exec --user www-data {{ nextcloud_container_name }} php occ app:disable {{ item }}
      loop: "{{ nextcloud_apps_disabled }}"
      when: item in _nextcloud_app_list.enabled
      register: _result
      changed_when: _result.rc != 0

    # https://www.jeffgeerling.com/blog/2017/changing-deeply-nested-dict-variable-ansible-playbook
    - name: Merge nextcloud_config | system
      ansible.builtin.set_fact:
        nextcloud_config: "{{ nextcloud_config | default({}) | combine({'system': nextcloud_config_system.system}, recursive=true) }}"

    - name: Merge nextcloud_config | system memory caching
      ansible.builtin.set_fact:
        nextcloud_config: "{{ nextcloud_config | default({}) | combine({'system': nextcloud_config_system_memory_caching.system}, recursive=true) }}"

    - name: Merge nextcloud_config | system mail
      ansible.builtin.set_fact:
        nextcloud_config: "{{ nextcloud_config | default({}) | combine({'system': nextcloud_config_system_smtp.system}, recursive=true) }}"
      when: nextcloud_config_system_smtp.system.mail_smtphost

    - name: Merge nextcloud_config | apps preview
      ansible.builtin.set_fact:
        nextcloud_config: "{{ nextcloud_config | default({}) | combine({'apps': {'preview': nextcloud_config_apps_preview.apps.preview}}, recursive=true) }}"

    - name: Merge nextcloud_config | apps previewgenerator
      ansible.builtin.set_fact:
        nextcloud_config: "{{ nextcloud_config | default({}) |
                            combine({'apps': {'previewgenerator': nextcloud_config_apps_previewgenerator.apps.previewgenerator}}, recursive=true) }}"
      tags: config_import

    - name: Merge nextcloud_config | apps user_ldap
      ansible.builtin.set_fact:
        nextcloud_config: "{{ nextcloud_config | default({}) |
                          combine({'apps': {'user_ldap': nextcloud_config_apps_user_ldap.apps.user_ldap}}, recursive=true) }}"
      when: nextcloud_config_apps_user_ldap.apps.user_ldap.s01ldap_base

    - name: Write temporary config file /dev/shm/nextcloud_config_file_for_import
      ansible.builtin.copy:
        content: "{{ nextcloud_config | to_nice_json(indent=2) }}"
        dest: "/dev/shm/nextcloud_config_file_for_import"
        # dest: "{{ _container_storage_dir_base }}/{{ nextcloud_container_name }}/nextcloud_config/nextcloud_config_file_for_import"
        mode: "0444"
        # setype: "container_file_t"
      changed_when: false
      tags: config_import

    - name: Apply temporary config file /dev/shm/nextcloud_config_file_for_import
      ansible.builtin.shell: >
        set -o pipefail && podman cp /dev/shm/nextcloud_config_file_for_import {{ nextcloud_container_name }}:/dev/shm/nextcloud_config_file_for_import &&
        podman exec --user www-data {{ nextcloud_container_name }} php occ config:import /dev/shm/nextcloud_config_file_for_import &&
        podman exec {{ nextcloud_container_name }} rm -f /dev/shm/nextcloud_config_file_for_import
      register: _result
      changed_when: _result is success
      tags: config_import

    - name: Remove temporary config file /dev/shm/nextcloud_config_file_for_import
      ansible.builtin.file:
        path: /dev/shm/nextcloud_config_file_for_import
        state: absent
      changed_when: false

    - name: Add Nextcloud cronjob
      ansible.builtin.cron:
        name: Nextcloud cronjob
        minute: "*/5"
        job: "podman exec --user www-data {{ nextcloud_container_name }} php /var/www/html/cron.php"
      tags:
        - cronjob

    - name: Run occ db:add-missing-indices
      ansible.builtin.command:
        podman exec --user www-data {{ nextcloud_container_name }} php occ db:add-missing-indices --no-interaction
      register: _result
      changed_when: _result is success

    - name: Run occ maintenance:repair --include-expensive
      ansible.builtin.command:
        podman exec --user www-data {{ nextcloud_container_name }} php occ maintenance:repair --include-expensive --no-interaction
      register: _result
      changed_when: _result is success
