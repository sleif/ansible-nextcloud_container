---

- name: nextcloud | merge container env | letsencrypt
  ansible.builtin.set_fact:
    nextcloud_container_env_options: "{{ nextcloud_container_env_options |  default({}) | combine (nextcloud_container_env.letsencrypt) }}"
  when: nextcloud_container_env.letsencrypt.VIRTUAL_HOST

# - ansible.builtin.debug:
#     msg: "{{ nextcloud_container_env.main | combine( nextcloud_container_env_options | default({}) ) }}"

- name: additional nginx proxy configuration from nginx_vhosts_defaults
  ansible.builtin.lineinfile:
    path: "{{ nginx_storage_dir_base }}/nginx/vhost.d/{{ item.1 }}"
    create: yes
    line: "{{ item.0.name }} {{ item.0.value }};"
    regexp: "^{{ item.0.name }}.*"
    mode: "0644"
  with_nested:
    - "{{ nginx_vhosts_defaults }}"
    - "{{ nextcloud_container_env.letsencrypt.VIRTUAL_HOST.split(',') }}"
  when: nextcloud_container_env.letsencrypt.VIRTUAL_HOST
  tags: nginx_vhosts_defaults

- name: additional nginx proxy configuration about letsencrypt
  ansible.builtin.lineinfile:
    path: "{{ nginx_storage_dir_base }}/nginx/vhost.d/{{ item.1 }}"
    create: yes
    line: "{{ item.0.name }} {{ item.0.value }};"
    regexp: "^{{ item.0.name }}.*"
    mode: "0644"
  with_nested:
    - [
        { name: "set_real_ip_from", value: "{{ DOCKER_NETWORK_SUBNET }}" }, ]
    - "{{ nextcloud_container_env.letsencrypt.VIRTUAL_HOST.split(',') }}"
  when: nextcloud_container_env.letsencrypt.VIRTUAL_HOST
  tags: nginx_vhosts_defaults

- name: nextcloud | update Nextcloud apps before a possible update of the container
  ansible.builtin.include_tasks:
    file: nextcloud_update_apps.yml

- name: Nextcloud-Container starten
  community.general.docker_container:
    name: nextcloud
    image: "nextcloud:{{ NEXTCLOUD_VERSION }}"
    networks:
      - name: "{{ DOCKER_NETWORK_NAME }}"
        aliases:
          - nextcloud-container
    networks_cli_compatible: yes
    state: started
    restart_policy: always
    recreate: yes
    #restart: yes
    pull: yes
    volumes:
      - "{{ container_storage_dir_base }}/nextcloud/nextcloud:/var/www/html:Z"
      - "{{ container_storage_dir_base }}/nextcloud/nextcloud_config:/var/www/html/config:Z"
      - "{{ container_storage_dir_base }}/nextcloud/nextcloud_custom_apps:/var/www/html/custom_apps:Z"
      - "{{ container_storage_dir_base }}/nextcloud/nextcloud_data:/var/www/html/data:Z"
      - "{{ container_storage_dir_base }}/nextcloud/nextcloud_themes:/var/www/html/themes:Z"
    env: "{{ nextcloud_container_env.main | combine( nextcloud_container_env_options | default({}) ) }}"
  register: _nextcloud

- name: nextcloud | register container IP
  ansible.builtin.set_fact:
    _container_ip: "{{ _nextcloud.ansible_facts.docker_container.NetworkSettings.Networks[ DOCKER_NETWORK_NAME ].IPAddress }}"

- name: nextcloud | wait for nextcloud service comes up
  ansible.builtin.uri:
    url: "http://{{ _container_ip }}/"
    # url: "https://{{ nextcloud_container_env.letsencrypt.VIRTUAL_HOST.split(',')[0] }}/"
    # status_code: 200
    status_code: [200, 400]
    validate_certs: False
  register: result
  until: result is succeeded
  retries: 120
  delay: 10

- name: nextcloud | get enabled and disabled apps
  ansible.builtin.command:
    docker exec --user www-data nextcloud php occ app:list --shipped=false --output=json
  register: nextcloud_app_list_result
  changed_when: false

- name: nextcloud | set_fact nextcloud_app_list
  ansible.builtin.set_fact:
    nextcloud_app_list: "{{ nextcloud_app_list_result.stdout }}"

- name: nextcloud | install default and custom apps
  ansible.builtin.command:
    docker exec --user www-data nextcloud php occ app:install {{ item }}
  loop: "{{ nextcloud_apps_enabled_default }} + {{ nextcloud_apps_enabled_custom }}"
  when: item not in nextcloud_app_list.enabled

- name: nextcloud | enable default and custom apps
  ansible.builtin.command:
    docker exec --user www-data nextcloud php occ app:enable {{ item }}
  loop: "{{ nextcloud_apps_enabled_default }} + {{ nextcloud_apps_enabled_custom }}"
  when: item not in nextcloud_app_list.enabled

- name: nextcloud | remove apps not wanted
  ansible.builtin.command:
    docker exec --user www-data nextcloud php occ app:disable {{ item }}
  loop: "{{ nextcloud_apps_disabled }}"
  when: item in nextcloud_app_list.enabled

# https://www.jeffgeerling.com/blog/2017/changing-deeply-nested-dict-variable-ansible-playbook
- name: nextcloud | merge nextcloud_config | system
  ansible.builtin.set_fact:
    nextcloud_config: "{{ nextcloud_config |  default({}) | combine ({'system': nextcloud_config_system.system }, recursive=True)  }}"

- name: nextcloud | merge nextcloud_config | system mail
  ansible.builtin.set_fact:
    nextcloud_config: "{{ nextcloud_config |  default({}) | combine ({'system': nextcloud_config_system_smtp.system }, recursive=True)  }}"
  when: nextcloud_config_system_smtp.system.mail_smtphost

- name: nextcloud | merge nextcloud_config | apps preview
  ansible.builtin.set_fact:
    nextcloud_config: "{{ nextcloud_config |  default({}) | combine ({'apps': {'preview': nextcloud_config_apps_preview.apps.preview }}, recursive=True)  }}"

- name: nextcloud | merge nextcloud_config | apps previewgenerator
  ansible.builtin.set_fact:
    nextcloud_config: "{{ nextcloud_config |  default({}) |
                      combine ({'apps': {'previewgenerator': nextcloud_config_apps_previewgenerator.apps.previewgenerator }}, recursive=True)  }}"

- name: nextcloud | merge nextcloud_config | apps user_ldap
  ansible.builtin.set_fact:
    nextcloud_config: "{{ nextcloud_config |  default({}) |
                       combine ({'apps': {'user_ldap': nextcloud_config_apps_user_ldap.apps.user_ldap }}, recursive=True)  }}"
  when: nextcloud_config_apps_user_ldap.apps.user_ldap.s01ldap_base

- name: nextcloud | write temporary config file /var/www/html/config/nextcloud_config_file_for_import
  ansible.builtin.copy:
    content: "{{ nextcloud_config | to_nice_json(indent=2) }}"
    dest: "{{ container_storage_dir_base }}/nextcloud/nextcloud_config/nextcloud_config_file_for_import"
    owner: "root"
    mode: 0o444
    setype: "container_file_t"
  changed_when: false

- name: nextcloud | apply temporary config file /var/www/html/config/nextcloud_config_file_for_import
  ansible.builtin.command:
    docker exec --user www-data nextcloud php occ config:import /var/www/html/config/nextcloud_config_file_for_import
  register: result
  changed_when: result is success

- name: nextcloud | remove temporary config file /var/www/html/config/nextcloud_config_file_for_import
  ansible.builtin.file:
    path: /var/www/html/config/nextcloud_config_file_for_import
    state: absent

- name: Add Nextcloud cronjob
  ansible.builtin.cron:
    name: Nextcloud cronjob
    minute: "*/5"
    job: "docker exec --user www-data nextcloud php /var/www/html/cron.php"
  tags:
    - cronjob

- name: Print information how to tune Nextcloud Database
  ansible.builtin.debug:
    msg:
     - "on host {{ ansible_host }} run the following command as root user"
     - "docker exec --user www-data nextcloud php occ db:convert-filecache-bigint --no-interaction"
